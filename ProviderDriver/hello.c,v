head	1.12;
access;
symbols;
locks; strict;
comment	@ * @;


1.12
date	2018.01.20.10.25.01;	author root;	state Exp;
branches;
next	1.11;

1.11
date	2018.01.20.10.24.13;	author root;	state Exp;
branches;
next	1.10;

1.10
date	2018.01.20.10.23.17;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2018.01.20.09.55.34;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2018.01.20.09.54.12;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2018.01.20.09.34.32;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2018.01.20.09.30.49;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2018.01.20.09.12.14;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2018.01.20.08.57.40;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2018.01.20.08.56.31;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2018.01.20.08.33.56;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2018.01.20.07.31.27;	author root;	state Exp;
branches;
next	;


desc
@driver registratio using register_chrdev implemented
@


1.12
log
@function call correction
@
text
@#include "headers.h"
#include "declarations.h"
#include "fileops.h"
//commented
int provider_module(void)
{
	printk(KERN_INFO "%s Begin\n",__func__);
	printk(KERN_INFO "%s end\n",__func__);
	return 0;
}
EXPORT_SYMBOL(provider_module);//add provider_module function into the kernel symbol table 

static int __init init_fun(void)
{
	int ret;
	printk(KERN_INFO "Hello im a KO, I am initialized\n");
	majorno = MAJOR_NO;
	minorno = MINOR_NO;
	//majorno = register_chrdev(majorno, DEVNAME, &fops);
	
	ret = alloc_chrdev_region(&devid,minorno, nod,DEVNAME);
	//if(majorno == -1)
	if(ret == -1)
	{
		printk(KERN_ERR "ERROR 1: Cannot register device\n");
		goto out;
	}
	majorno = MAJOR(devid);
	minorno = MINOR(devid);
	printk(KERN_INFO "I got major number %d\n",majorno);
	printk(KERN_INFO "I got minor number %d\n",minorno);
	dev = kmalloc(sizeof(Dev),GFP_KERNEL);
	if(!dev)
	{	
		printk(KERN_ERR "ERROR 2: Memory allocation failed!");
		goto out;
	}
	cdev_init( &dev->c_dev, &fops );
	dev->c_dev.ops = &fops; //initialize file ops pointer
	ret = cdev_add(&dev->c_dev, devid, 1);
	if(ret == -1)
	{
		printk(KERN_ERR "ERROR 3: Cannot add cdev");
		goto out;
	}
	return 0;
out:
	return -1;
}



static void __exit exit_fun(void)
{
	printk(KERN_INFO "Hello i am a KO, I am leaving BYE!\n");
	//unregister_chrdev(majorno, DEVNAME);
	kfree(dev);
	unregister_chrdev_region(devid,nod);
	cdev_del(&dev->c_dev);
	
}

module_init(init_fun);
module_exit(exit_fun);
@


1.11
log
@typo
@
text
@d38 1
a38 1
	cdev( &dev->c_dev, &fops );
@


1.10
log
@registering cdev code added
@
text
@d39 1
a39 1
	dev->cdev.ops = &fops; //initialize file ops pointer
@


1.9
log
@corrected Dev struct use
@
text
@d3 1
a3 1
//#include "fileops.h"
d38 8
d59 1
@


1.8
log
@allocate memory in kernel space(to simulate hardware)
@
text
@d32 1
a32 1
	dev = kmalloc(sizeof(DEV),GFP_KERNEL);
@


1.7
log
@merged
@
text
@d25 1
a25 1
		printk(KERN_ERR "ERROR: Cannot register device\n");
d32 6
d49 1
d51 1
@


1.6
log
@corrected export
@
text
@d5 6
@


1.5
log
@definition of exported api, and export it
@
text
@d5 1
a5 1
EXPORT_SYMBOL("provider_module");//add provider_module function into the kernel symbol table 
@


1.4
log
@correct minorno macro use
@
text
@d5 2
@


1.3
log
@used alloc_chrdev_region for driver registration
@
text
@d10 1
a10 1
	minorno = MINORNO;
@


1.2
log
@added commented
@
text
@d3 1
a3 1
#include "fileops.h"
d7 1
d10 6
a15 2
	majorno = register_chrdev(majorno, DEVNAME, &fops);
	if(majorno == -1)
d20 2
d23 1
d34 2
a35 1
	unregister_chrdev(majorno, DEVNAME);
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1

@
