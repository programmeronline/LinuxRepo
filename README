This is my linux repo!
1) semaphores is a synchronization mechanism

2) Available as kernel data structure

3) flag is incremented or decremented atomically (two operations)

struct sema
{
	flag;
	list of waiting processes;
	spin lock;
}
4) scope of flag is system

5) spin lock 


i) decide how many process can access the semaphore variable
ii) before entering the critical sections, the semephore enters the wait operation
	i) if semaphore value is > 0
		then decrement and proceed
			aftere end of critical section, increments the semaphore value, generate an event for list of waiting processes
			if the process which is in critical sections is killed by a signal, it will make rest of proc to wait
			(cfq comletely fair queue scheduler)
	ii) if 0 then the process goes to waiting queue
nice to change the priority

1) semctl is used to perform operation on semaphore
i) SETVAL use to set tha value of semaphore

semaphores are used for shareable resources not shared resources
even if a resources is not shared
not recommended to use for a resource which is always shared

GDB
use "commands" to execute multiple commands after breakpoint is hit. like printing loop or array values

Shared memory
1) it is a ranget of available physical addresses
2) created outside process context
3) scope of shaed memory is specific to each process, local or data
4) sema is mandatory for shared memory implementation
5) when shmget is called a page from page table is allocated. this page will be in lowest distance from the pages used by page
6) the buffer is allocated and cleared filled with ascii 26
7) if the creator locks it(RDONLY) only the creator can unlock it
	if other processes lock it, any other process can unlock

Threads
1) gets own stack 
2) own local vari
3) shares global varaibles
4) shares file descriptors
5) shares malloc'd data
6) signal handler code is shared but signal handlers should be registered by each thread sepearately
7) pending signal queues are different
8) timing faults and sync

return of the threads
	pthread_join(tid,return **);
1) new thread must have thread id, must exit with pthread_exit
2) the calling thread should join to simulate wait system call(wait for thread to finish execution)
3) pthread_kill

sem_int(sem_t  *sem, int pshared, unsigned int value)
pshared param controls the type of semaphore
if pshared = 0 the semaphore is local to single process , if 1 it is visible to othre processes also

sem_wait - increments the sem value by 1
sem_post - decrements the sem value by 1


pthread_create

1) thread is finish when pthread_exit()
2)

scp 120 ipaddress:\

mutex;
created by macros
faster than binary semaphores
only thread can access it
	mutex_init(mutex, attr)
	mutex_lock(mutes)
	mutex_unlock(mutex)
	mutex_destroy(mutex) 

thread attributes
sequence
1) call apis to set particular options
2) init the attribute 
3) use the attr during thread creation
detach threads, no exit code is needed for the creator
pthread_attr_int used to prepare attributes bytes
and used in pthread_create 2nd param
api for each option
	pthread_attr_setdetachstate(attr, state)
		state - joinable or detached(not joinable)
	pthread_attr_getschedulingpolicy
deferred a thread which is paused on thread_join cannot be cancelled by other thread using pthread_cancel


assign
server
	socket
	bind
	listen
	connect
client
	socket
	connect
	
main server will run infinitely to create threads

socket
network is a combination of ip address and port number
socket has 3 attributes
	domain- AF_UNIX used for testing sockets in single system, AF_INET systems in network
	type-Stream and datagram
	protocol- TCP/IP UDP/IP depends on type and domain
bind() is a system call which gives name to a socket(which will handled by dns)
only server will use bind
listen() is used by server to keep track of all the clients waiting to connect to that socket created by it
server will accept the request and the client will call connect()
ADDRESS FORMAT
if AF_UNIX sockaddress_un
if AF_INET sockaddress_in
CONNECT() at client end will also send an implicit 4th argument containing the addressformat of client and its sockaddress
ACCEPT()
	checks compatibality doman, addres, format etc
	accept new client connection and create new socket which will be the entry point of that particular client socket. new socket is created for each client which is calling connect with server address attributes
first is the 
2nd arg is the client socket address sent implicitly (4th arg) by the connetc() of client

the queue is timed queue

struct sockaddr_in
{
short int sin_family; AF_INET
int sin_port; htons(:port numnber:)
struct in_addr sin_addr; inet_addr()
} only for AF_INET
htons is used to maintain consistent byte ordering(endianness)
netstat

Device drivers
whole memory is divided into user space and io space
VFS's have entry points called nodes(in /dev folder)
/dev folder contains nodes, a device is identified by the major number and a minor number(ls -l in /dev)
each device driver will have identification number called MAJOR number given by kernel
and each device will have a identification number called MINOR number given by device driver
major and minor numbers are stored in a 32 bit variable
which is divided into two parts, 12bits for major number and 20 bits for minor number(dev_t)
this dev_t is present in inode struct
open close read write implementation are done in device driver routine

when open system is called with node name: explore inode struct
	first dev_t is checked
	union in inode :then device type is identified
	struct file_operations: then file operation are check against the open mode

	device driver will have its own struct mydev
struct Mydev
{
struct regpointer;
struct cdev;
}
struct file {} explore is the file pointer, or a stream to which a file descriptor is pointing
this struct is created (strem in created for the application) on open success
major and minor number is copied into "private_data" membre of struct file

regpointer points to start of list of registers, each registers will some buffer.

	a device can have multiple registers
struct cdev for character device




	
VFS
	---------
	API
	---------
	SCI
	---------
	contains kernel buffers
	---------
	block IO layer
	---------
	device driver
	---------
	HAL
	---------
	HW
	---------
Harwares will have registers and memory

init fun called in module_init
__init it is a kernel initialization module
called only once-- when insmod is called , init function will run same for the contrary


kernel symbol table has printk,,which will print to kernel log buffer, which has message priority, kern_levels.h
compiling device driver
$(MAKE) -C $/lib/moduules/../build M=$PWD modules
in makefile "-C" change to kernel directory /lib/modules/../build..uses current kernel variables and dependencies
-M 
there will be device table in kernel
intitally 3 entires are needed to make the driver visible in the table

1) major 
2) minor
3) driver name


algo for initialization function
1) register devide
2) get memory for scull device
3) set memory to null in register
4) initalize device (prepare mydev, cdev, items)
5) get device status

RCS
rcs -i <filename> //insert a file into rcs
ci //submit file
co //checkout in read only mode
co -l <filename> //p4v checkout, edit mode
co -r1.1 //check out specific revision number

devide table
|major|minor|devicename|dev|cdev|

struct mydev will have "data" data will point to cdev , cdev will have file operations
